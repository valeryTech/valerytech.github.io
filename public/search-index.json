[{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":0,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":2,"permalink":"/system-design/elements/","summary":"","tags":[],"title":"Elements"},{"content":"","date":"2023-09-07","id":3,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Diátaxis framework ","date":"2023-09-07","id":4,"permalink":"/docs/guides/example-guide/","summary":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.","tags":[],"title":"Example Guide"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Diátaxis framework ","date":"2023-09-07","id":5,"permalink":"/system-design/elements/load-balancer/","summary":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.","tags":[],"title":"Load Balancer"},{"content":"courses\norder: smarchok 2 courses + https://www.youtube.com/@SystemDesignInterview/videos algoexpert 2 courses (fundamentals and examples) zerotomastery \u0026ldquo;# Master the Coding Interview: System Design + Architecture (Part 1)\u0026rdquo; hellointerview examples + youtube channel + (maybe) premium https://interviewing.io/guides/system-design-interview/part-four#chapter-one ? algoexpert \u0026ldquo;# Systems Design Interview Tips\u0026rdquo; https://github.com/Sairyss/system-design-patterns cool cirriculim with examples\ndesigngurus ? https://www.designgurus.io/path/system-design-interview-playbook bytebytego ? tryexponent courses ?\nSD Framework steps, checklists\nhttps://interviewing.io/guides/system-design-interview/part-three\nCommon / Preparation Guides interviewing.io guides https://blog.pragmaticengineer.com/preparing-for-the-systems-design-and-coding-interviews/ https://github.com/Sairyss/system-design-patterns\ninterview process guides interview guide + interviewing.io https://www.tryexponent.com/blog/system-design-interview-guide\nwatch, analyze and reflect mock interviews [[#mock_interviews]]\nmaybe see channels with useful videos [[#useful_videos]]\nOther codemia.io (?)\nreflect and analyze papers [[#Papers]]\nblogs on system design; technical blogs; conferences\nPlan Start by developing a toolbox (Version 1) to address the time-consuming nature of selecting tools and patterns, as identifying the right tools and patterns can be a lengthy process. Apply it to practical challenges while iterating and improving it along the way.\nAction Plan Structure Develop a Starter Toolbox (Version 1):\nCreate a collection of foundational tools, frameworks, and design patterns to streamline the decision-making process. Focus on essential concepts like scalability, reliability, and modularity to build a versatile starting point. Apply the Toolbox to Real-World Challenges:\nUse your toolbox to design solutions for practical scenarios, such as building scalable APIs, designing a database schema, or implementing caching layers. Select diverse problems to cover a range of system design principles. Iterate and Refine:\nContinuously evaluate your toolbox based on the challenges you solve. Identify gaps or inefficiencies and incorporate new tools, techniques, or patterns as you gain experience. Practice Collaborative Design:\nSimulate interview-style system design discussions with peers or mentors to enhance your ability to explain and adapt your toolbox in real-time. Document Lessons Learned:\nKeep a log of the systems you design, the tools you use, and the trade-offs you encounter. Use these reflections to improve your problem-solving and prepare for interviews. Learning (SD Interview) [!advice] Use [[learning]] principles and practices!\nAt a high level, preparing for system design interviews is really about assembling the right pieces: you\u0026rsquo;ll need to know some core concepts, key technologies, and common patterns. On this base, you\u0026rsquo;ll establish a strategy or delivery framework for executing the interview. And finally, you\u0026rsquo;ll need to practice to ensure you\u0026rsquo;re comfortable the day of your actual interview.\nHelloInterview structured learning process into these blocks: Core Concepts =\u0026gt; { Key Technologies, Patterns } =\u0026gt; Delivery Framework =\u0026gt; Common Problems Practicing\nPractice Practice Practice Once you have the foundation in place, it\u0026rsquo;s time to practice. Passively consuming content is good, but you\u0026rsquo;ll retain 10x more information by actually doing.\nChoose a question: Select a question from the list of common questions below. Read the requirements: Understand the requirements of the system you\u0026rsquo;ll need to design. Try to answer on your own: Either practice with our Guided Practices (below) or on a virtual whiteboard like Excalidraw. Read the answer key: Only after you have tried to answer the question, read the answer key to see how your answer compares. Put your knowledge to the test: Once you\u0026rsquo;ve done a few questions and are feeling comfortable, put your knowledge to the test by scheduling a mock interview with an interviewer from your target company. Interviewing.io Candidates often get overwhelmed with system design. We don’t blame them. There are literally hundreds of topics you can study when preparing for an interview. But does that mean that you should drop everything and go study all of them? Absolutely not. It’s vital to master the basic principles first.\nProfessional experience with distributed systems isn’t needed to pass system design interviews. And even if you do have that experience, keep in mind that many talented distributed systems engineers still struggle with the system design interview format. How you perform in an interview is not a measure of your worth as a software engineer \u0026ndash; it is a measure of your ability to do system design interviews. The two are related but not equal; being a good programmer has a surprisingly small role in passing interviews.\nmock_interviews interviewing.io videos from youtube https://www.youtube.com/watch?v=mQgKAK7y11s\ntryexponent mock videos https://www.youtube.com/watch?v=iyLqwyFL0Zc\nhello interview https://www.youtube.com/watch?v=tgSe27eoBG0 really cool! https://www.hellointerview.com/\nhttp://youtube.com/watch?v=PI0yGBT9LHo\n^^ analyze them:\nfind out errors, try it yourself first, how would you resolve this errors? technical depth? alternative solutions? communication aspect, leadership skills, proactivity, interview structure. Advices It’s vital to master the Basic Principles first.\nThe best candidates trying by doing LOTS of mock interviews, with peers\nUse enigneering principles and practices. ? [link]\nInterview Process [[interview]]\nWhat to Learn [[elements]]\nAreas (from algoexpert):\nfoundational SD knowledge key characteristics of systems actual components of the system like LB, caches, proxies, leader election actual tuck; real-life tools, existing products to use in SD to build your system system design patterns (refactor) Topics to research and grok: building blocks (systems approach?) nfu reasoning trade-offs:\ncommong trade-off reasoning make a list of these in one place and refine them after you get more and more practice async patterns, communication, protocols, distributed coordination, transactions and sagas.. common technical problems data and databases api construction fundamental things: vector clocks (hellointerview) classification\n(interviewing.io) 12 fundamental (technical) system design concepts a. APIs b. Databases (SQL vs NoSQL) c. Scaling d. CAP Theorem e. Web authentication and basic security f. Load balancers g. Caching h. Message queues i. Indexing j. Failover k. Replication l. Consistent hashing\nProjects \u0026amp; Examples first in [[_themes]] file, also we have a big amount of mock interviews algoexpert videos hellointerview smarchok etc +this one https://interviewing.io/guides/system-design-interview/part-four from [[distributed_systems]] (? some examples)\nCommunity discord servers! forums meet ups\nhttps://launchpass.com/pminterview\nyou can discuss some project on leetcode, for example\nFundamentals \u0026amp; Distributed Systems [[distributed_systems]]\nMicroservices [[microservices]]\nSources https://www.hellointerview.com/learn/system-design/problem-breakdowns/leetcode\nexample how to organize your SD public Result: https://github.com/Sairyss/system-design-patterns -\u0026gt; todo add projects here (public learning)\nOther https://mlengineer.io/facebook-system-design-interview-4-must-watched-videos-212e07d4fbc2 Scaling Instagram Infrastructure - https://www.youtube.com/watch?v=hnpzNAPiC0E\u0026t=669s Scaling Facebook Live Videos to a Billion Users - https://www.youtube.com/watch?v=IO4teCbHvZw\u0026t=1692s Building Real Time Infrastructure at Facebook - Facebook - SRECon2017 - https://www.youtube.com/watch?v=ODkEWsO5I30 USENIX ATC \u0026lsquo;13 - TAO: Facebook\u0026rsquo;s Distributed Data Store for the Social Graph - https://www.youtube.com/watch?v=sNIvHttFjdI\nhttps://muratbuffalo.blogspot.com/2023/10/hints-for-distributed-systems-design.html\nuseful_videos common overview https://www.youtube.com/watch?v=F2FmTdLtb_4\nchannels with useful videos: https://www.youtube.com/@hello_interview staff engineer https://www.youtube.com/@irtizahafiz https://www.youtube.com/@interviewpen ?? https://www.youtube.com/@ByteByteGo\nPapers https://www.confluent.io/blog/kafka-streams-tables-part-1-event-streaming/ https://levelup.gitconnected.com/system-design-interview-all-or-none-ordered-peer-to-peer-broadcast-45b33fb2f6be\nsla, slo and other: https://sre.google/sre-book/service-level-objectives/\npapers: • Amazon - Dynamo paper • Google - Map-reduce paper • Google - GFS paper • Facebook - TAO paper • Jeff Dean\u0026rsquo;s talk at Stanford: /watch?v=modXC5IWTJI • Building Billion user Load Balancer at Facebook: /watch?v=bxhYNfFeVF4 • Netflix Guide to Microservices: /watch?v=CZ3wIuvmHeM • Amazon DynamoDB deep dive: /watch?v=HaEPXoXVf2k\n","date":"2023-09-07","id":6,"permalink":"/system-design/about/","summary":"courses\norder: smarchok 2 courses + https://www.youtube.com/@SystemDesignInterview/videos algoexpert 2 courses (fundamentals and examples) zerotomastery \u0026ldquo;# Master the Coding Interview: System Design + Architecture (Part 1)\u0026rdquo; hellointerview examples + youtube channel + (maybe) premium https://interviewing.","tags":[],"title":"System Design Common Page"},{"content":"","date":"2023-09-07","id":7,"permalink":"/system-design/interview/","summary":"","tags":[],"title":"Interview"},{"content":"","date":"2023-09-07","id":8,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":9,"permalink":"/docs/reference/example-reference/","summary":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.","tags":[],"title":"Example Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":10,"permalink":"/system-design/interview/example/","summary":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.","tags":[],"title":"Guide How to"},{"content":"","date":"2025-01-26","id":11,"permalink":"/docs/guides/faq/","summary":"","tags":[],"title":"Faq"},{"content":"","date":"2025-01-26","id":12,"permalink":"/system-design/elements/faq/","summary":"","tags":[],"title":"Faq"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":13,"permalink":"/system-design/framework/","summary":"Link to valuable, relevant resources.","tags":[],"title":"Framework"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":14,"permalink":"/docs/resources/","summary":"Link to valuable, relevant resources.","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":15,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":16,"permalink":"/system-design/","summary":"","tags":[],"title":"System Design"},{"content":"","date":"2023-09-07","id":17,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":18,"permalink":"/","summary":"","tags":[],"title":"System Design and Software Architecture"},{"content":"","date":"0001-01-01","id":19,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":20,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":21,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]