<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Topics on System Design</title>
    <link>http://localhost:1313/system-design/topics/</link>
    <description>Recent content in Topics on System Design</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2014-2023</copyright>
    <lastBuildDate>Sat, 22 Feb 2025 09:02:28 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/system-design/topics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Api</title>
      <link>http://localhost:1313/system-design/topics/api/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/api/</guid>
      <description>&lt;p&gt;find out info about:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;API Design principles, API evolution, its usage as interface of a system&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;what is API (fringe, interface, algebra etc) #sd #todo&lt;/p&gt;</description>
    </item>
    <item>
      <title>Caching</title>
      <link>http://localhost:1313/system-design/topics/caching/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/caching/</guid>
      <description>&lt;h1 id=&#34;ontology&#34;&gt;ontology&lt;/h1&gt;&#xA;&lt;p&gt;Cache definitions:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Caching is a commonly used &lt;em&gt;performance optimization&lt;/em&gt; (&amp;lt;= really important that it is an optimization) whereby the previous result of some operation is stored so that subsequent requests can use this stored value rather than spending time and resources recalculating the value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Communication</title>
      <link>http://localhost:1313/system-design/topics/communication/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/communication/</guid>
      <description>&lt;p&gt;Getting communication between microservices right is problematic for many due in great part, I feel, to the fact that people gravitate toward a chosen technological approach without first considering the different types of communication they might want. In this chapter, I’ll try and tease apart the different styles of communication to help you understand the pros and cons of each, as well as which approach will best fit your problem space.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Db 1</title>
      <link>http://localhost:1313/system-design/topics/db-1/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/db-1/</guid>
      <description>&lt;p&gt;data access pattern&lt;/p&gt;&#xA;&lt;p&gt;Types: SQL, Key-Value Stores, Blob Stores (S3, GCS), Timelines DB, Graph(Neo4j), Spatial (QuadTree)&lt;/p&gt;&#xA;&lt;h1 id=&#34;sql&#34;&gt;sql&lt;/h1&gt;&#xA;&lt;p&gt;Pros: ACID transactions, imposing very strict structure =&amp;gt; querying capabilities, DB indexing, Data Normalization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distributed Systems</title>
      <link>http://localhost:1313/system-design/topics/distributed-systems/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/distributed-systems/</guid>
      <description>&lt;p&gt;distributed:&#xA;book &amp;ldquo;thinking in distributed systems&amp;rdquo;&#xA;book &amp;ldquo;understanding distributed systems&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Martin Kleppman course videos: https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB + pdf lecture notes&lt;/p&gt;</description>
    </item>
    <item>
      <title>Envelope Estimations</title>
      <link>http://localhost:1313/system-design/topics/envelope_estimations/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/envelope_estimations/</guid>
      <description>&lt;p&gt;https://www.hellointerview.com/blog/mastering-estimation #todo&lt;/p&gt;&#xA;&lt;p&gt;According to Jeff Dean, Google Senior Fellow, &amp;ldquo;back-of-the-envelope calculations are estimates you create using a combination of thought experiments and common performance numbers to get a good feel for which designs will meet your requirements&amp;rdquo;&#xA;Commonly asked back-of-the-envelope estimations: QPS, peak QPS, storage, cache, number of servers, etc. You can practice these calculations when preparing for an interview. Practice makes perfect.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hashing</title>
      <link>http://localhost:1313/system-design/topics/hashing/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/hashing/</guid>
      <description>&lt;p&gt;Hasning strategies:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;rendezvous hashing&lt;/strong&gt;&#xA;https://randorithms.com/2020/12/26/rendezvous-hashing.html&#xA;Rendezvous hashing - rank server set.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;consistent hashing&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Consistent hashing is a way to effectively distribute the keys in any distributed storage system—cache, database, or otherwise—to a large number of nodes or servers while allowing us to add or remove nodes without incurring a large performance hit.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microservices</title>
      <link>http://localhost:1313/system-design/topics/microservices/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/microservices/</guid>
      <description>&lt;p&gt;https://www.youtube.com/watch?v=LcJKxPXYudE&#xA;good video and comments&lt;/p&gt;&#xA;&lt;p&gt;https://martinfowler.com/articles/microservices.html&lt;/p&gt;&#xA;&lt;p&gt;https://www.martinfowler.com/articles/distributed-objects-microservices.html&lt;/p&gt;&#xA;&lt;p&gt;https://microservices.io/patterns/index.html&#xA;https://eventuate.io/exampleapps.html&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partitioning</title>
      <link>http://localhost:1313/system-design/topics/partitioning/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/partitioning/</guid>
      <description>&lt;p&gt;For very large datasets, or very high query throughput, that is not sufficient: we need to break the data up into partitions, also known as sharding.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Queues</title>
      <link>http://localhost:1313/system-design/topics/queues/</link>
      <pubDate>Sat, 22 Feb 2025 09:02:28 +0000</pubDate>
      <guid>http://localhost:1313/system-design/topics/queues/</guid>
      <description>&lt;p&gt;message queues&lt;/p&gt;&#xA;&lt;p&gt;Advantages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;buffering traffic spikes&lt;/li&gt;&#xA;&lt;li&gt;If a message has to be processed by some very expensive code, you may also hold them in a queue while previous messages are being processed so you don&amp;rsquo;t overload (and potentially kill) servers.&lt;/li&gt;&#xA;&lt;li&gt;Queues can deliver messages to multiple systems, instead of the client having to send them to all the required systems.&lt;/li&gt;&#xA;&lt;li&gt;Queues decouple the client from the server by eliminating the need to know the server address.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Based on the different implementations of message queues, there can be different combinations of the following properties:&#xA;~ Guaranteed delivery.&#xA;~ No duplicate messages are delivered.&#xA;~ Ensure that the order of messages is maintained.&#xA;~ At least once delivery with idempotent consumers.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
